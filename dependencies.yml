---
- hosts: localhost
  tasks:

  - name: Get GPG key for kitware repo (for cmake)
    shell:  wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null


  - name: Add deadsnakes PPA
    apt_repository:
      repo: ppa:deadsnakes/ppa
      state: present

  - name: Add mozillateam PPA
    apt_repository:
      repo: ppa:mozillateam/ppa
      state: present

  - name: copy mozilla-firefox to /etc/apt/preferences.d
    copy:
      src: "files/apt-preferences-mozilla-firefox"
      dest: /etc/apt/preferences.d/mozilla-firefox
      mode: 0644
      owner: root
      group: root

  - name: Disable unattended upgrades for firefox
    lineinfile:
      path: /etc/apt/apt.conf.d/51unattended-upgrades-firefox
      state: present
      create: true
      regexp: '^Unattended-Upgrade'
      line: 'Unattended-Upgrade::Allowed-Origins:: "LP-PPA-mozillateam:${distro_codename}";'

  - name: Update apt cache
    apt:
      update_cache: yes

  - name: Install Dependencies (Apt)
    apt:
      pkg:
          - libhdf5-dev
          - mosquitto-clients
          - host
          - dnsutils
          - screen
          - telnet
          - chrony
          #- telegraf
          #- influxdb
          #- influxdb-client
          - vim
          - nano
          - less
          - file
          - telnet
          - iptables
          - python3-pip
          - cmake
          - xorg-dev
          - libboost-all-dev
          - minicom
          - net-tools
          - iftop
          - backport-iwlwifi-dkms
          - firefox
          - python3.13
          - python3.13-dev
          - python3.13-venv
          # docker
          - nvidia-container
          - docker-buildx
          - docker-compose-v2
          - docker.io
          # tuner control
          - libusb-1.0-0
      state: present
      update_cache: yes

  - name: Create a virtual environment
    command: python3.13 -m venv /opt/radiohound/python313

  - name: Install Icarus Dependencies (Pip)
    pip:
      name:
        - paho-mqtt>=1.5.1
        - requests>=2.26.0
        - serial>=0.0.97
        - schedule>=0.6.0
        - inotify>=0.2.10
        - scipy>=1.8.0
        - pytz>=2022.1
        - numpy>=1.22.3
        - pyvisa>=1.12.0
        - PyVISA-py>=0.5.3
        - psutil>=6.0.0
        - gps>=3.19
        - digital_rf
        - spectrumx
        - docker
        # tuner control
        - adafruit-blinka
        # rfsoc control
        - pyzmq
      state: present
      virtualenv: /opt/radiohound/python313
      virtualenv_python: python

  - name: Gather Docker runtimes
    shell: docker info | grep -E "Runtimes:.*"
    register: docker_runtimes
    ignore_errors: yes

  - name: Restart Docker to load nvidia-container
    when: "'nvidia' not in docker_runtimes.stdout"
    shell:  service docker restart

  - name: Remove unnecessary packages
    apt:
      pkg:
        - gnome-initial-setup
        - nftables
      state: absent

  # - name: Install Utilities (Pip)
  #   pip:
  #     name:
  #       - jetson-stats
  #   async: 120
  #   poll: 5
  #   register: jetson_stats_watcher

  # - name: Check jetson-stats install
  #   async_status:
  #     jid: "{{ jetson_stats_watcher.ansible_job_id }}"
  #   register: jetson_stats_result
  #   until: jeton_status_result.finished
  #   retries: 60  # Adjust based on your needs
  #   delay: 10
  #   failed_when: jetson_status_result.rc is not defined and retries == 60

  # - name: Handle jetson-stats timeout
  #   command: /usr/sbin/service jtop stop
  #   when: jeton_status_result.rc is not defined


  # - name: Install uv
  #   shell: "files/uv-install.sh"


  # - name: Clone holohub repository
  #   git:
  #     repo: 'https://github.com/ryanvolz/holohub.git'
  #     dest: /opt/holohub
  #     update: yes
  #     version: "mep"
  #     accept_hostkey: yes
  #   ignore_errors: yes
  #   register: run_holohub_setup


  # - name: Add git safe.directory to holohub repo
  #   shell: GIT_DIR=/opt/holohub/.git GIT_WORK_TREE=/opt/holohub git config --add safe.directory "/opt/holohub"
  #   when: not run_holohub_setup.before


  # - name: Setup holohub
  #   command:
  #     cmd: ./run setup
  #     chdir: /opt/holohub
  #   when: run_holohub_setup


  # - name: Check if dpdk is installed
  #   ansible.builtin.command:
  #     cmd: dpkg-query -W -f='${Version}' dpdk-for-jetson
  #   register: dpdk_check
  #   ignore_errors: yes

  # - name: Download dpdk
  #   ansible.builtin.command:
  #     cmd: wget https://github.com/spectrumx/ansible/releases/download/deps-20241112/dpdk-for-jetson_22.11.6-1ubuntu2_arm64.deb -O /tmp/dpdk-for-jetson_22.11.6-1ubuntu2_arm64.deb
  #     warn: false
  #   when: dpdk_check.stdout != "22.11.6-1ubuntu2"

  # - name: Install dpdk
  #   apt:
  #     deb: /tmp/dpdk-for-jetson_22.11.6-1ubuntu2_arm64.deb
  #     state: present
  #   when: dpdk_check.stdout != "22.11.6-1ubuntu2"

  # - name: Install holohub (long)
  #   command:
  #     cmd: './run build mimo_radar_pipeline --configure-args "-DMATX_EN_PYBIND11=ON -DPYBIND11_FINDPYTHON=ON -DPython_EXECUTABLE=/usr/bin/python3 -DPython_ROOT_DIR=/usr/lib/python3"'
  #     chdir: /opt/holohub
  #   when: run_holohub_setup

  # - name: Holohub setcap
  #   command:
  #     cmd: 'setcap cap_net_raw,cap_dac_override,cap_dac_read_search,cap_ipc_lock,cap_sys_admin+ep ./build/applications/mimo_radar_pipeline/cpp/mimo_radar_pipeline'
  #     chdir: /opt/holohub
  #   when: run_holohub_setup


