---
- hosts: localhost
  tasks:

  - name: Check if safe.directory exists
    shell: grep -q 'safe' /opt/ansible/.git/config
    register: safe_directory_check
    ignore_errors: true

  - name: Add key to ansible repo
    shell: GIT_DIR=/opt/ansible/.git GIT_WORK_TREE=/opt/ansible git config core.sshCommand "ssh -i /opt/radiohound/.ssh/id_rsa"
    when: safe_directory_check.rc != 0

  - name: Add git safe.directory to ansible repo
    shell: GIT_DIR=/opt/ansible/.git GIT_WORK_TREE=/opt/ansible git config --add safe.directory /opt/ansible
    when: safe_directory_check.rc != 0

  - name: Get Jetson Model from /proc/device-tree/model
    ansible.builtin.command: cat /proc/device-tree/model
    register: jetson_model

  - name: Check Orin Nano
    ansible.builtin.set_fact:
      jetson_board: "orin_nano"
    when: "'Orin Nano Developer' in jetson_model.stdout"

  - name: Check Orin Nano NX
    ansible.builtin.set_fact:
      jetson_board: "orin_nx"
    when: "'Orin NX' in jetson_model.stdout"

  - name: copy authorized_keys to root
    copy:
      src: "files/root_authorized_keys"
      dest: /root/.ssh/authorized_keys
      mode: 0600
      owner: root
      group: root

  - name: Make sure Network Manager is installed
    apt:
      pkg:
          - network-manager
      state: present
      update_cache: yes

  - name: Enable NetworkManager-wait-online.service
    systemd:
      name: NetworkManager-wait-online
      enabled: true

  - name: copy udev 70-persistent-net.rules
    copy:
      src: "files/70-persistent-net.rules"
      dest: /etc/udev/rules.d/70-persistent-net.rules
      mode: 0755
      owner: root
      group: root

  - name: copy /etc/NetworkManager/system-connections
    copy:
      src: "files/NetworkManager/system-connections/"
      dest: /etc/NetworkManager/system-connections/
      mode: 0600
      owner: root
      group: root

  - name: copy /etc/NetworkManager/dnsmasq-shared.d
    copy:
      src: "files/NetworkManager/dnsmasq-shared.d/"
      dest: /etc/NetworkManager/dnsmasq-shared.d/
      mode: 0644
      owner: root
      group: root

  - name: Reload NetworkManager configuration
    command: nmcli connection reload
    ignore_errors: yes

  - name: Allow udev to set interface names
    lineinfile:
      path: /usr/lib/systemd/network/99-default.link
      state: present
      regexp: '^NamePolicy=keep'
      line: 'NamePolicy=database keep kernel onboard slot path'

  - name: Gather network interfaces
    shell: ifconfig
    register: network_interfaces

  - name: Set MAC address for each interface
    shell: ifconfig eth1 hw ether $(ethtool -P eth1 | awk '{print $3}')
    when: "'eth1' in network_interfaces.stdout"
    ignore_errors: yes

  # We want to use the first on-board network's mac address as our unique ID,
  # but the Jetpack deployment process was cloning eth0's mac to everyone
  # Use eth1, but since we rename them via udev, also check for en0
  - name: Get hostname based on eth1
    shell: cat /sys/class/net/eth1/address | sed -e 's/://g' | cut -c 9-12
    when: "'eth1' in network_interfaces.stdout"
    register: eth1_hostname

  - name: Set hostname variable
    set_fact:
      hostname: "{{ eth1_hostname.stdout }}"
    when: eth1_hostname is changed

  - name: Get hostname based on en0
    shell: cat /sys/class/net/en0/address | sed -e 's/://g' | cut -c 9-12
    when: "'en0' in network_interfaces.stdout"
    register: en0_hostname

  - name: Set hostname variable
    set_fact:
      hostname: "{{ en0_hostname.stdout }}"
    when: en0_hostname is changed

  - name: Update hostname (systemd)
    hostname:
      name: "{{ hostname }}"

  - copy: content="{{ hostname }}" dest=/etc/hostname

  - name: Ensure sysctl.conf has the correct values
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '^{{ item.key }}'
      line: '{{ item.key }}={{ item.value }}'
    loop:
      - { key: 'net.core.rmem_default', value: '104857600' }
      - { key: 'net.core.rmem_max', value: '104857600' }
      - { key: 'net.core.wmem_default', value: '65536' }
      - { key: 'net.core.wmem_max', value: '104857600' }
      - { key: 'net.ipv4.ip_forward', value: '1' }

  - name: Apply sysctl settings
    command: sysctl -p

  - name: Check current power mode
    stat:
      path: /var/lib/nvpmodel/status
    register: current_status

  - name: Set power mode
    copy:
      dest: /var/lib/nvpmodel/status
      content: "pmode:0003\n"
    # register: need_reboot
    # changed_when: need_reboot.changed and current_status.stat.exists and "'pmode:0003\n' not in current_status.content"



  handlers:
    - name: Save iptables
      command: /sbin/service iptables save
      when: ansible_os_family == "RedHat"

    - name: Save iptables
      command: /sbin/iptables-save
      when: ansible_os_family == "Debian"
